Classifier training
###################

The classifier is a model put after the SimCLR model that is supposed to 
classify embeddings as representations of crops with or without paracingulate.


There are two (+1) main python files used for that:

generate_embeddings
-------------------
generate_embeddings creates the embeddings of crops with a chosen SimCLR. It
requires you to set in the embeddings.yaml config file the path to the model
folder (often ending by YYYY-MM-DD/hh-mm-ss) and the path where to store the
embeddings (created if needed).

train_multiple_classifiers
--------------------------
train_multiple_classifiers creates classifiers, trains them on the chosen
embeddings, and produce evaluation results (e.g. ROC curve). It is linked to
the classifier config, where you have to provide the embeddings and labels
paths to train the classifier on, embeddings you want to have the result on
(if different), and parameters for the classifiers and the training.

pca_embeddings
--------------
pca_embeddings creates embeddings of crops that can then also be given to 
train_multiple_classifiers. You have to specify in the embeddings.yaml which 
data to train on, what data you want to create the embeddings with, and the 
dimension of the embeddings.


The config of these python files is stored in two yaml files: embeddings.yaml
is for generate_embeddings and pca_embeddings, and binary_classifier.yaml is
for train_multiple_classifiers.

embeddings.yaml
---------------
- model_path: where the SimCLR model you want to create the embeddings with
is stored
- embeddings_save_path: where you want to save the embeddings generated. If
None, they are stored next to the model.
- pca_Xfit: dataset the PCA is trained on.
- pca_Xtransform: dataset used to generate the embeddings. If None, same as
pca_Xfit
- n_pca: dimension of the mebddings generated by the pca. The dimension of
the embeddings for SimCLR is given by num_representation_features (in the 
backbone config).

binary_classifier.yaml
----------------------
- training_embeddings: the embeddings to train the classifiers on.
- embeddings_of_interest: the embeddings to apply the evaluations methods
(ROC curves and UC, accuracy) to. If None, same as training_embeddings.
- results_save_path: where to store the evaluations. If None, the results
are stored next to the embeddings of interest.
- training_labels: csv file containing the training labels. The column(s)
used as label(s) are given in the dataset yaml file.
- labels_of_interest: labels of the embeddings of interest (necessary to 
compute the evaluations). he column(s) used as label(s) are given in the 
dataset yaml file.
- classifier_hidden_layers: list of the hidden layers sizes. The input layer
has the same size as the embeddings' dimension, and the output layer is of 
size 1 (in the current version at least).
- classifier_activation: activation of the last layer only. All the other
ones have no activation.
- classifier_loss: loss used to train the classifiers. Only MSE and BCE are
implemented for now.
- class_max_epochs: number of epochs each classifier is trained.
- class_batch_size: batch size for the classifiers' training.
- n_repeat: number of classifiers to train. They are independent, but share
the same parameters.
- classifier_seed: seed for the train/test split.
- classifier_test_size: percentage of the data put in the test set. Can also
be an int, in which case it is the absolute number of subjects in it.